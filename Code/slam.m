
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% - - - - - - - - - - - - - - - - SIZES - - - - - - - - - - - - - - - -
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
pose = 3;
lmk_size = 2;

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% - - - - - - - - - - - - - - - - AMOUNT - - - - - - - - - - - - - - - -
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
num_poses = 3;
num_lmks = 4;

torad = pi/180;

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% - - - - - I've measured these values with Gimp's ruler tool - - - - -
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

factors{1+0} = struct(...
    'type',         'pose',...
    'measurement',  [0; 0; 0],...
    'covariance',   diag([1e-8, 1e-8, 1e-8]),...
    'index',        [0, 0]...
);

factors{1+1} = struct(...
    'type',         'motion',...
    'measurement',  [0.93; 0.0625; torad*3.6],...
    'covariance',   diag([3e-3, 3e-3, (torad*3)^2]),...
    'index',        [0, 1]...
);

factors{1+2} = struct(...
    'type',         'motion',...
    'measurement',  [1.07; -0.21; -torad*14.4],...
    'covariance',   diag([3e-3, 3e-3, (torad*3)^2]),...
    'index',        [1, 2]...
);

factors{1+3} = struct(...
    'type',         'lmk',...
    'measurement',  [1.2; torad*41.4],...
    'covariance',   diag([3e-3, (torad*3)^2]),...
    'index',        [0, 3]...
);

factors{1+4} = struct(...
    'type',         'lmk',...
    'measurement',  [0.67; torad*91.3],...
    'covariance',   diag([3e-3, (torad*3)^2]),...
    'index',        [1, 3]...
);

factors{1+5} = struct(...
    'type',         'lmk',...
    'measurement',  [1.38; torad*21.6],...
    'covariance',   diag([3e-3, (torad*3)^2]),...
    'index',        [1, 4]...
);

factors{1+6} = struct(...
    'type',         'lmk',...
    'measurement',  [1.49; -torad*49],...
    'covariance',   diag([3e-3, (torad*3)^2]),...
    'index',        [0, 5]...
);

factors{1+7} = struct(...
    'type',         'lmk',...
    'measurement',  [0.79; -torad*72.45],...
    'covariance',   diag([3e-3, (torad*3)^2]),...
    'index',        [1,5]...
);

factors{1+8} = struct(...
    'type',         'lmk',...
    'measurement',  [2.59; -torad*18.9],...
    'covariance',   diag([3e-3, (torad*3)^2]),...
    'index',        [0,6]...
);

factors{1+9} = struct(...
    'type',         'lmk',...
    'measurement',  [1.72; -torad*35.1],...
    'covariance',   diag([3e-3, (torad*3)^2]),...
    'index',        [1,6]...
);

factors{1+10} = struct(...
    'type',         'lmk',...
    'measurement',  [0.73; -torad*78.5],...
    'covariance',   diag([3e-3, (torad*3)^2]),...
    'index',        [2,6]...
);

% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
% - - - - - - - - - - - - - - - - States - - - - - - - - - - - - - - - -
% - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

states{1+0} = struct(...
    'type',     'pose',...
    'range',    [1, 2, 3],...
    'value',    rand(3, 1)...
);

states{1+1} = struct(...
    'type',     'pose',...
    'range',    [4, 5, 6],...
    'value',    rand(3, 1)...
);

states{1+2} = struct(...
    'type',     'pose',...
    'range',    [7, 8, 9],...
    'value',    rand(3, 1)...
);

states{1+3} = struct(...
    'type',     'lmk',...
    'range',    [10, 11],...
    'value',    rand(2, 1)...
);

states{1+4} = struct(...
    'type',     'lmk',...
    'range',    [12, 13],...
    'value',    rand(2, 1)...
);

states{1+5} = struct(...
    'type',     'lmk',...
    'range',    [14, 15],...
    'value',    rand(2, 1)...
);

states{1+6} = struct(...
    'type',     'lmk',...
    'range',    [16, 17],...
    'value',    rand(2, 1)...
);
 
dx = ones(17, 1)*1e6;

while norm(dx) > 1e-3
    [A, r]  = buildproblem(states, factors);
    dx      = solvelinearized(A, r);
    states  = updatestates(states, dx);
    drawmap(states, factors);
end
